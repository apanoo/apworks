# All sources in src folder
AUX_SOURCE_DIRECTORY (. LIB_SRC)
SET( LIB_HEADERS nario.h )

# Target name
SET( OUT_PUT_TARGET "nario" )

# -DFREEIMAGE_LIB -DLIBRAW_NODLL -DOPJ_STATIC is for freeimage static lib
ADD_DEFINITIONS(-DFREEIMAGE_LIB -DLIBRAW_NODLL -DOPJ_STATIC)

# Common include 
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/deps)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/src)

# Common library
LINK_DIRECTORIES(${PROJECT_SOURCE_DIR}/lib)

# SDL2
IF ( CMAKE_SYSTEM_NAME MATCHES "Linux" )
    MESSAGE(STATUS "current platform: Linux ")
    MESSAGE(STATUS "Build SDL2 static library ")
    SET( SDL_STATIC ON CACHE BOOL "Build the static SDL library" )
    SET( SDL_SHARED OFF CACHE BOOL "Build the shared SDL library" )
    ADD_DEFINITIONS( -DSDL_MAIN_HANDLED )   # Important : no sdl-main compile
    SET( EXTRA_LIBS ${EXTRA_LIBS} SDL2-static )
    INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/deps/SDL2/include)
ELSE( CMAKE_SYSTEM_NAME MATCHES "Linux" )   # TODO : Fix bug -> Linux compile failed with SDL Dynamic library 
    SET( SDL_STATIC OFF CACHE BOOL "Build the static SDL library" )
    SET( SDL_SHARED ON CACHE BOOL "Build the shared SDL library" )
    ADD_DEFINITIONS( -DSDL_MAIN_HANDLED )   # Important : no sdl-main compile
    SET( EXTRA_LIBS ${EXTRA_LIBS} SDL2 )
    INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/deps/SDL2/include)
ENDIF( CMAKE_SYSTEM_NAME MATCHES "Linux" )

# GLEW
ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS -DGLEW_NO_GLU -DGLEW_STATIC)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/deps/glew2.0)
SET (EXTRA_LIBS ${EXTRA_LIBS} opengl32.lib)
SET (EXTRA_LIBS ${EXTRA_LIBS} glew)

# Box2D
OPTION(BOX2D_BUILD_STATIC "Build Box2D static libraries" ON)
IF(BOX2D_BUILD_STATIC)
    MESSAGE(STATUS "Build Box2D static libraries")
    SET (EXTRA_LIBS ${EXTRA_LIBS} Box2D)
ENDIF(BOX2D_BUILD_STATIC)

# FreeImage
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/deps/FreeImage/Source)
SET (EXTRA_LIBS ${EXTRA_LIBS} freeimage)

# freetype
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/deps/freetype/include)
SET (EXTRA_LIBS ${EXTRA_LIBS} freetype) 

# openal
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/deps/openal/include)
SET (EXTRA_LIBS ${EXTRA_LIBS} openal common) 

# gorilla
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/deps/gorilla-audio/src)
SET (EXTRA_LIBS ${EXTRA_LIBS} gorilla) 

# APP
FILE(GLOB APP_SRCS "app/*.cpp")
FILE(GLOB APP_HEADERS "app/*.h")
LIST(APPEND LIB_SRC ${APP_SRCS})
LIST(APPEND LIB_HEADERS ${APP_HEADERS})

# extension
FILE(GLOB EXTENSION_SRCS "extension/freetype-gl/*.c")
FILE(GLOB EXTENSION_HEADERS "extension/freetype-gl/*.h")
LIST(APPEND LIB_SRC ${EXTENSION_SRCS})
LIST(APPEND LIB_HEADERS ${EXTENSION_HEADERS})

# AUDIO
FILE(GLOB AUDIO_SRCS "audio/*.cpp")
FILE(GLOB AUDIO_HEADERS "audio/*.h")
LIST(APPEND LIB_SRC ${AUDIO_SRCS})
LIST(APPEND LIB_HEADERS ${AUDIO_HEADERS})

# EVENTS
FILE(GLOB EVENTS_SRCS "events/*.cpp")
FILE(GLOB EVENTS_HEADERS "events/*.h")
LIST(APPEND LIB_SRC ${EVENTS_SRCS})
LIST(APPEND LIB_HEADERS ${EVENTS_HEADERS})

# GRAPHICS
FILE(GLOB GRAPHICS_SRCS "graphics/*.cpp")
FILE(GLOB GRAPHICS_HEADERS "graphics/*.h")
LIST(APPEND LIB_SRC ${GRAPHICS_SRCS})
LIST(APPEND LIB_HEADERS ${GRAPHICS_HEADERS})

# buffer
FILE(GLOB BUFFER_SOURCE "graphics/buffer/*.cpp")
FILE(GLOB BUFFER_HEADER "graphics/buffer/*.h")
LIST(APPEND LIB_SRC ${BUFFER_SOURCE})
LIST(APPEND LIB_HEADERS ${BUFFER_HEADER})

# 2d
FILE(GLOB 2D_SOURCE "graphics/2d/*.cpp")
FILE(GLOB 2D_HEADER "graphics/2d/*.h")
LIST(APPEND LIB_SRC ${2D_SOURCE})
LIST(APPEND LIB_HEADERS ${2D_HEADER})

# shader
FILE(GLOB SHADER_SOURCE "graphics/shader/*.cpp")
FILE(GLOB SHADER_HEADER "graphics/shader/*.h")
LIST(APPEND LIB_SRC ${SHADER_SOURCE})
LIST(APPEND LIB_HEADERS ${SHADER_HEADER})

# GRAPHICS UI
FILE(GLOB GRAPHICS_UI_SRCS "graphics/ui/*.cpp")
FILE(GLOB GRAPHICS_UI_HEADERS "graphics/ui/*.h")
LIST(APPEND LIB_SRC ${GRAPHICS_UI_SRCS})
LIST(APPEND LIB_HEADERS ${GRAPHICS_UI_HEADERS})

# INPUT
FILE(GLOB INPUT_SRCS "input/*.cpp")
FILE(GLOB INPUT_HEADERS "input/*.h")
LIST(APPEND LIB_SRC ${INPUT_SRCS})
LIST(APPEND LIB_HEADERS ${INPUT_HEADERS})

# LOG
FILE(GLOB LOG_SRCS "log/*.cpp")
FILE(GLOB LOG_HEADERS "log/*.h")
LIST(APPEND LIB_SRC ${LOG_SRCS})
LIST(APPEND LIB_HEADERS ${LOG_HEADERS})

# timer
FILE(GLOB TIMER_SRCS "timer/*.cpp")
FILE(GLOB TIMER_HEADERS "timer/*.h")
LIST(APPEND LIB_SRC ${TIMER_SRCS})
LIST(APPEND LIB_HEADERS ${TIMER_HEADERS})

# MATH
FILE(GLOB MATH_SRCS "math/*.cpp")
FILE(GLOB MATH_HEADERS "math/*.h")
LIST(APPEND LIB_SRC ${MATH_SRCS})
LIST(APPEND LIB_HEADERS ${MATH_HEADERS})

# UTILS
FILE(GLOB UTILS_SRCS "utils/*.cpp")
FILE(GLOB UTILS_HEADERS "utils/*.h")
LIST(APPEND LIB_SRC ${UTILS_SRCS})
LIST(APPEND LIB_HEADERS ${UTILS_HEADERS})

# example
FILE(GLOB EXAMPLE_SOURCE "example/*.cpp")
FILE(GLOB EXAMPLE_HEADER "example/*.h")
LIST(APPEND LIB_SRC ${EXAMPLE_SOURCE})
LIST(APPEND LIB_HEADERS ${EXAMPLE_HEADER})

# Source Group
SOURCE_GROUP("" FILES nario.h)
SOURCE_GROUP(app FILES ${APP_SRCS} ${APP_HEADERS})
SOURCE_GROUP(audio FILES ${AUDIO_SRCS} ${AUDIO_HEADERS})
SOURCE_GROUP(events FILES ${EVENTS_SRCS} ${EVENTS_HEADERS})
SOURCE_GROUP(graphics FILES ${GRAPHICS_SRCS} ${GRAPHICS_HEADERS})
SOURCE_GROUP(graphics\\buffer FILES ${BUFFER_SOURCE} ${BUFFER_HEADER})
SOURCE_GROUP(graphics\\2d FILES ${2D_SOURCE} ${2D_HEADER})
SOURCE_GROUP(graphics\\shader FILES ${SHADER_SOURCE} ${SHADER_HEADER})
SOURCE_GROUP(graphics\\ui FILES ${GRAPHICS_SRCS} ${GRAPHICS_UI_HEADERS})
SOURCE_GROUP(input FILES ${INPUT_SRCS} ${INPUT_HEADERS})
SOURCE_GROUP(log FILES ${LOG_SRCS} ${LOG_HEADERS})
SOURCE_GROUP(timer FILES ${TIMER_SRCS} ${TIMER_HEADERS})
SOURCE_GROUP(math FILES ${MATH_SRCS} ${MATH_HEADERS})
SOURCE_GROUP(utils FILES ${UTILS_SRCS} ${UTILS_HEADERS})
SOURCE_GROUP(example FILES ${EXAMPLE_SOURCE} ${EXAMPLE_HEADER})
SOURCE_GROUP(extension\\freetype-gl FILES ${EXTENSION_SRCS} ${EXTENSION_HEADERS})

# exe
ADD_EXECUTABLE(nario ${LIB_SRC} ${LIB_HEADERS})

# Link libs
TARGET_LINK_LIBRARIES( ${OUT_PUT_TARGET} ${EXTRA_LIBS} )

# Library output path
# SET( LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib )

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)